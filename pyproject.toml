[tool.poetry]
name = "mcp-story-service"
version = "0.1.0"
description = "MCP Story Service - Standalone Narrative Intelligence Server"
authors = ["AI Movie Platform <dev@ft.tc>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# MCP Protocol implementation
mcp = "^1.0.0"
# Async support
asyncio = "*"
# Redis for story state management
redis = "^5.0.0"
# YAML for configuration files
pyyaml = "^6.0"
# Pydantic for data models
pydantic = "^2.0.0"
# Logging
structlog = "^23.0.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
# Linting and formatting
ruff = "^0.1.0"
black = "^23.0.0"
mypy = "^1.0.0"
# Type stubs
types-PyYAML = "^6.0.0"
types-redis = "^4.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"